// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  username     String       @unique
  email        String       @unique
  password     String
  avatar       String?
  description  String?
  marks        Mark[]
  createdAt    DateTime?    @default(now()) @map("created_at")
  updatedAt    DateTime?    @default(now()) @updatedAt @map("updated_at")
  bookStatuses BookStatus[]

  @@map("users")
}

model Book {
  id               String       @id @default(uuid())
  title            String
  rating           Float
  cover            String
  author           String
  category         String
  descriptionTitle String       @map("description_title")
  description      String
  marks            Mark[]
  createdAt        DateTime?    @default(now()) @map("created_at")
  updatedAt        DateTime?    @default(now()) @updatedAt @map("updated_at")
  bookStatuses     BookStatus[]

  @@map("books")
}

model Mark {
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @map("user_id")
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String    @map("book_id")
  value     Int
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@id([userId, bookId])
  @@map("marks")
}

enum Status {
  ADDED
  READ
}

model BookStatus {
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String    @map("book_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @map("user_id")
  status    Status
  date      DateTime  @default(now())
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@id([bookId, userId])
  @@map("book_statuses")
}
